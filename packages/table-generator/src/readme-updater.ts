import { readFileSync, writeFileSync } from "node:fs";

const START_MARKER = "<!-- APPS_TABLE_START -->";
const END_MARKER = "<!-- APPS_TABLE_END -->";

/**
 * Update README.md with the generated table
 */
export function updateReadme(
  readmePath: string,
  appsTable: string,
  packagesTable: string,
): { wasUpdated: boolean; error?: string } {
  let readmeContent: string;

  try {
    readmeContent = readFileSync(readmePath, "utf-8");
  } catch (error) {
    return {
      wasUpdated: false,
      error: `Could not read README.md: ${(error as Error).message}`,
    };
  }

  const startIndex = readmeContent.indexOf(START_MARKER);
  const endIndex = readmeContent.indexOf(END_MARKER);

  if (startIndex === -1 || endIndex === -1) {
    return {
      wasUpdated: false,
      error: `Could not find table markers in README.md. Please add:\n${START_MARKER}\n${END_MARKER}`,
    };
  }

  const beforeTable = readmeContent.substring(
    0,
    startIndex + START_MARKER.length,
  );
  const afterTable = readmeContent.substring(endIndex);

  const tableContent = [
    "",
    "<!-- This table is auto-generated by @shelby-protocol/table-generator -->",
    "",
    appsTable.trimEnd(),
    packagesTable.trimEnd(),
    "",
  ].join("\n");

  const newReadmeContent = beforeTable + tableContent + afterTable;

  if (newReadmeContent === readmeContent) {
    return { wasUpdated: false };
  }

  try {
    writeFileSync(readmePath, newReadmeContent, "utf-8");
    return { wasUpdated: true };
  } catch (error) {
    return {
      wasUpdated: false,
      error: `Could not write README.md: ${(error as Error).message}`,
    };
  }
}
